roughcode

export const getQuestions = async (vendor,questionAnswersId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/api/admin/${vendor}/questions/${questionAnswersId}`);
    console.log("data from backend",response.data);
    return response.data;
  } catch (error) {
    console.error('Error fetching questions:', error);
    throw error;
  }
};
--------------------------------------------------------
import React, { useState } from 'react';
import { addQuestion, importExcel } from '../api';
import { Button } from 'react-bootstrap';

const initialFormData = {
  mainQuestion: '',
  answer: '',
  actionToRun: '',
  variations: [
    {
      variationList: '',
      variationId: 0,
    },
  ],
};

const AddData = () => {
  const [formData, setFormData] = useState(initialFormData);
  const [selectedOption,setSelectedOption] = useState('base');
  const [selectedFile, setSelectedFile] = useState(null);

  const handleFileUpload = async () => {
    if(selectedFile)
    {
      try {
        
      const formData = new FormData();
      formData.append('file',selectedFile)
      const vendor = selectedOption;
      const fileType  = selectedFile.type

      await importExcel(vendor,formData,fileType);

      console.log('File Upload:',selectedFile.type)
      setSelectedFile(null)

      } catch (error) {
        console.log('Error File Uploading',error)
      }

      
    }

    else
    {
      console.log('No file selected.')
    }
  }
  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleInputChange = (e, index) => {
    const { name, value } = e.target;
    if (name === 'variationList') {
      const updatedVariations = [...formData.variations];
      updatedVariations[index][name] = value;
      setFormData({
        ...formData,
        variations: updatedVariations,
      });
    } else {
      setFormData({
        ...formData,
        [name]: value,
      });
    }
  };

  const handleSubmit =async (e) => {
    e.preventDefault();
    // Add your form submission logic here
try {
  await addQuestion(selectedOption,formData);
  console.log("FormSubmitted",formData)
} catch (error) {
  console.log("Error:"+error)
}

    
  };

  const handleAddVariation = () => {
    setFormData({
      ...formData,
      variations: [
        ...formData.variations,
        {
          variationList: '',
          variationId: formData.variations.length,
        },
      ],
    });
  };

  const handleRemoveVariation = (index) => {
    const updatedVariations = formData.variations.filter((_, i) => i !== index);
    setFormData({
      ...formData,
      variations: updatedVariations,
    });
  };

  const isFormValid = () => {
    // Add your form validation logic here
    return formData.mainQuestion !== '' && formData.answer !== '' && formData.actionToRun !== '';
  };

  return (
    <div>
        <br></br> <br></br> <br></br>
      <div className='container card card-body shadow-lg p-3 mb-5 bg-white rounded' style={{backgroundColor:'white'}}>

        <div className='d-flex'>
        <span><h3>Create ChatBot DB</h3></span>
        
        <span style={{paddingLeft: '3rem'}} ><b>Select Vendor : </b></span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="base">Base</option>
        <option value="calco">Calico</option>
        <option value="datatrace">DataTrace</option>
        <option value="datatree">Data Tree</option>
        <option value="lnd">LND</option>
        {/* Add more options as needed */}
      </select>
      </div>

    <form onSubmit={handleSubmit}>
      <div className='form-group'>
      <label>Main Question:</label>
      <input type="text"  className='form-control' name="mainQuestion" value={formData.mainQuestion} onChange={handleInputChange} />
    </div>
    <br/>
    <div className='form-group'>
      <label>Answer:</label>
      <input type="text" className='form-control'  name="answer" value={formData.answer} onChange={handleInputChange} />
</div>
<br/>
      <div className='form-group'>
      <label>Action to Run:</label>
      <input type="text" className='form-control'  name="actionToRun" value={formData.actionToRun} onChange={handleInputChange} />
</div>
<br/>
<div className='form-group'>
      <label>Variations:</label>
      {formData.variations.map((variation, index) => (
        <div key={index}>
          <br/>
          <input
            type="text"
             className='form-control' 
            name="variationList"
            value={variation.variationList}
            onChange={(e) => handleInputChange(e, index)}
          />
          <br/>
          <button className='btn btn-primary' type="button" onClick={() => handleRemoveVariation(index)}>
            Remove Variation
          </button>
        </div>
      ))}
       <br/>
      <button type="button" className='btn btn-primary d-inline-flex' onClick={handleAddVariation}>
        Add Variation
      </button>
      <br/><br/>
      <button type="submit" className='btn btn-primary' disabled={!isFormValid()}>
        Submit
      </button>
      </div>
    </form>

    </div>
    
  
    <hr/>
   <br/>
    <div className='container card card-body shadow-lg p-3 mb-5 bg-white rounded' style={{backgroundColor:'white'}}>
      <h3>Upload Your File</h3>
      <br/>
    <input type='file' className=' form-control' placeholder='Upload File only type of (txt,json,excel).'  onChange={ (e) => setSelectedFile(e.target.files[0])}/>
    <small>Upload File only type of (txt,json,excel).</small><br/>
    <Button style={{marginRight:'73rem'}} onClick={handleFileUpload}>Upload File</Button>
  
    </div>
    </div>
  );
};

export default AddData;
------------------------------------------
import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from '../api'; // Import your API functions
import { useParams } from 'react-router-dom'; // Import useParams if using React Router

const EditPage = () => {
  const { vendor, questionId } = useParams(); // Use useParams to get parameters from the URL
  const [formData, setFormData] = useState({
    mainQuestion: '',
    answer: '',
    actionToRun: '',
    variations: [],
  });

  useEffect(() => {
    const fetchQuestionData = async () => {
      try {
        const questionData = await getQuestions(questionId, vendor);
        setFormData({
          mainQuestion: questionData.mainQuestion,
          answer: questionData.answer,
          actionToRun: questionData.actionToRun,
          variations: questionData.variations.map((variation) => ({
            variationList: variation.variationList,
            variationId: variation.variationId,
          })),
        });
      } catch (error) {
        console.error('Error fetching question data:', error);
      }
    };

    fetchQuestionData();
  }, [vendor, questionId]);

  const handleInputChange = (e, index) => {
    const { name, value } = e.target;
    if (name === 'variations') {
      const updatedVariations = [...formData.variations];
      updatedVariations[index] = { ...updatedVariations[index], variationList: value };
      setFormData({ ...formData, variations: updatedVariations });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      await updateQuestion(vendor, questionId, formData);
      console.log('Question updated successfully!');
      // You may want to add some feedback to the user, redirect, or perform other actions upon successful update.
    } catch (error) {
      console.error('Error updating question:', error);
      // Handle error - show an error message to the user or log it.
    }
  };

  const handleAddVariation = () => {
    setFormData({
      ...formData,
      variations: [
        ...formData.variations,
        {
          variationList: '',
          variationId: formData.variations.length,
        },
      ],
    });
  };

  const handleRemoveVariation = (index) => {
    const updatedVariations = formData.variations.filter((_, i) => i !== index);
    setFormData({
      ...formData,
      variations: updatedVariations,
    });
  };

  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        <div className='form-group'>
          <label>Main Question:</label>
          <input
            className='form-control'
            type="text"
            name="mainQuestion"
            value={formData.mainQuestion}
            onChange={handleInputChange}
          />
        </div>
        <br />
        <div className='form-group'>
          <label>Answer:</label>
          <input
            className='form-control'
            type="text"
            name="answer"
            value={formData.answer}
            onChange={handleInputChange}
          />
        </div>
        <br />
        <div className='form-group'>
          <label>ActionToRun:</label>
          <input
            className='form-control'
            type="text"
            name="actionToRun"
            value={formData.actionToRun}
            onChange={handleInputChange}
          />
        </div>
        <br />
        <div className='form-group'>
          <label>Variations:</label>
          {formData.variations.map((variation, index) => (
            <div key={index}>
              <textarea
                className='form-control'
                name="variations"
                value={variation.variationList}
                onChange={(e) => handleInputChange(e, index)}
              />
              <br />
              <button className='btn btn-primary' type="button" onClick={() => handleRemoveVariation(index)}>
                Remove Variation
              </button>
            </div>
          ))}
          <br />
          <button type="button" className='btn btn-primary d-inline-flex' onClick={handleAddVariation}>
            Add Variation
          </button>
        </div>
        <br />
        <button className='btn btn-success' type="submit">
          Update
        </button>
      </form>
    </div>
  );
};

export default EditPage;
----------------
import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from '../api'; // Import your API functions
import { useParams } from 'react-router-dom'; // Import useParams if using React Router

const EditPage = () => {
  const { vendor, questionId } = useParams(); // Use useParams to get parameters from the URL
  const [formData, setFormData] = useState({
    mainQuestion: '',
    answer: '',
    actionToRun: '',
    variations: [],
  });

  useEffect(() => {
    const fetchQuestionData = async () => {
      try {
        console.log("data: ", vendor, questionId);
        const questionData = await getQuestions(questionId, vendor);
        console.log('question data: ', questionData);
        setFormData({
          mainQuestion: questionData.mainQuestion,
          answer: questionData.answer,
          actionToRun: questionData.actionToRun,
          variations: questionData.variations.map((variation) => ({
            variationList: variation.variationList,
            variationId: variation.variationId,
          })),
        });
      } catch (error) {
        console.error('Error fetching question data:', error);
      }
    };

    fetchQuestionData();
  }, [vendor, questionId]);

  const handleInputChange = (e, index) => {
    const { name, value } = e.target;
    if (name === 'variations') {
      const updatedVariations = [...formData.variations];
      updatedVariations[index] = { ...updatedVariations[index], variationList: value };
      setFormData({ ...formData, variations: updatedVariations });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      await updateQuestion(vendor, questionId, formData);
      console.log('Question updated successfully!');
      // You may want to add some feedback to the user, redirect, or perform other actions upon successful update.
    } catch (error) {
      console.error('Error updating question:', error);
      // Handle error - show an error message to the user or log it.
    }
  };

  const handleAddVariation = () => {
    setFormData({
      ...formData,
      variations: [
        ...formData.variations,
        {
          variationList: '',
          variationId: formData.variations.length,
        },
      ],
    });
  };

  const handleRemoveVariation = (index) => {
    const updatedVariations = formData.variations.filter((_, i) => i !== index);
    setFormData({
      ...formData,
      variations: updatedVariations,
    });
  };

  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        <div className='form-group'>
          <label>Main Question:</label>
          <input
            className='form-control'
            type="text"
            name="mainQuestion"
            value={formData.mainQuestion}
            onChange={handleInputChange}
          />
        </div>
        <br />
        <div className='form-group'>
          <label>Answer:</label>
          <input
            className='form-control'
            type="text"
            name="answer"
            value={formData.answer}
            onChange={handleInputChange}
          />
        </div>
        <br />
        <div className='form-group'>
          <label>ActionToRun:</label>
          <input
            className='form-control'
            type="text"
            name="actionToRun"
            value={formData.actionToRun}
            onChange={handleInputChange}
          />
        </div>
        <br />
        <div className='form-group'>
          <label>Variations:</label>
          {formData.variations.map((variation, index) => (
            <div key={index}>
              <textarea
                className='form-control'
                name="variations"
                value={variation.variationList}
                onChange={(e) => handleInputChange(e, index)}
              />
              <br />
              <button className='btn btn-primary' type="button" onClick={() => handleRemoveVariation(index)}>
                Remove Variation
              </button>
            </div>
          ))}
          <br />
          <button type="button" className='btn btn-primary d-inline-flex' onClick={handleAddVariation}>
            Add Variation
          </button>
        </div>
        <br />
        <button className='btn btn-success' type="submit">
          Update
        </button>
      </form>
    </div>
  );
};

export default EditPage;
---------------------
import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from '../api'; // Import your API functions
import { useParams } from 'react-router-dom'; // Import useParams if using React Router
 
const EditPage = () => {
  const { vendor, questionId } = useParams(); // Use useParams to get parameters from the URL
  const [formData, setFormData] = useState({
    mainQuestion: '',
    answer: '',
    actionToRun: '',
    variations: '',
  });
 
  useEffect(() => {
    const fetchQuestionData = async () => {
      try {
        console.log("data: ",vendor,questionId);
        const questionData = await getQuestions( questionId,vendor);
        console.log('question data: ', questionData);
        setFormData({
          mainQuestion: questionData.mainQuestion,
          answer: questionData.answer,
          actionToRun: questionData.actionToRun,
          variations: questionData.variations.map((variation) => ({
            variationList: variation.variationList,
            variationId: variation.variationId,
          })),
        });
      } catch (error) {
        console.error('Error fetching question data:', error);
      }
    };
 
    fetchQuestionData();
  }, [vendor, questionId]);
 
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };
 
  const handleFormSubmit = async (e) => {
    e.preventDefault();
 
    try {
      await updateQuestion(vendor, questionId, formData);
      console.log('Question updated successfully!');
      // You may want to add some feedback to the user, redirect, or perform other actions upon successful update.
    } catch (error) {
      console.error('Error updating question:', error);
      // Handle error - show an error message to the user or log it.
    }
  };
 
  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        <div className='form-group'>
        <label>Main Question:</label>
        <input className='form-control'
          type="text"
          name="mainQuestion"
          value={formData.mainQuestion}
          onChange={handleInputChange}
        />
</div>
       <br />
<div className='form-group'>
        <label>Answer:</label>
        <input
        className='form-control'
          type="text"
          name="answer"
          value={formData.answer}
          onChange={handleInputChange}
        />
</div>
<br />
<div className='form-group'>
        <label>ActionToRun:</label>
        <input
         className='form-control'
          type="text"
          name="actionToRun"
          value={formData.actionToRun}
          onChange={handleInputChange}
        />
</div>
<br />
<div className='form-group'>
        <label>Variations:</label>
        <input
        className='form-control'
          type="text"
          name="variations"
          value={formData.variations}
          onChange={handleInputChange}
        />
</div>
<br />
        <button className='btn btn-success' type="submit">Update</button>
      </form>
    </div>
  );
};
 
export default EditPage;
------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from '../api'; // Import your API functions
import { useParams } from 'react-router-dom'; // Import useParams if using React Router

const EditPage = () => {
  const { vendor, questionId } = useParams(); // Use useParams to get parameters from the URL
  const [formData, setFormData] = useState({
    mainQuestion: '',
    answer: '',
    actionToRun: '',
    variations: '',
  });

  useEffect(() => {
    const fetchQuestionData = async () => {
      try {
        const questionData = await getQuestions(vendor, questionId);
        console.log('question data: ', questionData);
        setFormData({
          mainQuestion: questionData.mainQuestion,
          answer: questionData.answer,
          actionToRun: questionData.actionToRun,
          variations: questionData.variations,
        });
      } catch (error) {
        console.error('Error fetching question data:', error);
      }
    };

    fetchQuestionData();
  }, [vendor, questionId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      await updateQuestion(vendor, questionId, formData);
      console.log('Question updated successfully!');
      // You may want to add some feedback to the user, redirect, or perform other actions upon successful update.
    } catch (error) {
      console.error('Error updating question:', error);
      // Handle error - show an error message to the user or log it.
    }
  };

  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        <label>Main Question:</label>
        <input
          type="text"
          name="mainQuestion"
          value={formData.mainQuestion}
          onChange={handleInputChange}
        />

        <label>Answer:</label>
        <input
          type="text"
          name="answer"
          value={formData.answer}
          onChange={handleInputChange}
        />

        <label>ActionToRun:</label>
        <input
          type="text"
          name="actionToRun"
          value={formData.actionToRun}
          onChange={handleInputChange}
        />

        <label>Variations:</label>
        <input
          type="text"
          name="variations"
          value={formData.variations}
          onChange={handleInputChange}
        />

        <button type="submit">Update</button>
      </form>
    </div>
  );
};

export default EditPage;
----------------------------
import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from './api'; // Import your API functions
import { useParams } from 'react-router-dom'; // Import useParams if using React Router

const EditPage = () => {
  const { vendor, questionId } = useParams(); // Use useParams to get parameters from the URL
  const [formData, setFormData] = useState({
    mainQuestion: '',
    answer: '',
    actionToRun: '',
    variations: '',
  });

  useEffect(() => {
    const fetchQuestionData = async () => {
      try {
        const questionData = await getQuestions(vendor, questionId);
        setFormData({
          mainQuestion: questionData.mainQuestion,
          answer: questionData.answer,
          actionToRun: questionData.actionToRun,
          variations: questionData.variations,
        });
      } catch (error) {
        console.error('Error fetching question data:', error);
      }
    };

    fetchQuestionData();
  }, [vendor, questionId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      await updateQuestion(vendor, questionId, formData);
      console.log('Question updated successfully!');
      // You may want to add some feedback to the user, redirect, or perform other actions upon successful update.
    } catch (error) {
      console.error('Error updating question:', error);
      // Handle error - show an error message to the user or log it.
    }
  };

  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        <label>Main Question:</label>
        <input
          type="text"
          name="mainQuestion"
          value={formData.mainQuestion}
          onChange={handleInputChange}
        />

        <label>Answer:</label>
        <input
          type="text"
          name="answer"
          value={formData.answer}
          onChange={handleInputChange}
        />

        <label>ActionToRun:</label>
        <input
          type="text"
          name="actionToRun"
          value={formData.actionToRun}
          onChange={handleInputChange}
        />

        <label>Variations:</label>
        <input
          type="text"
          name="variations"
          value={formData.variations}
          onChange={handleInputChange}
        />

        <button type="submit">Update</button>
      </form>
    </div>
  );
};

export default EditPage;
_______________
export const getQuestions = async (vendor,questionAnswersId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/api/admin/${vendor}/questions/${questionAnswersId}`);
    console.log("data from backend",response.data);
    return response.data;
  } catch (error) {
    console.error('Error fetching questions:', error);
    throw error;
  }
};

export const updateQuestion = async (vendor, questionId, questionData) => {
  try {
    await axios.put(`${API_BASE_URL}/api/admin/${vendor}/edit-question/${questionId}`, questionData);
  } catch (error) {
    console.error('Error updating question:', error);
    throw error;
  }
};

const handleEdit = () => {
    
  };

 <button className="btn btn-primary" onClick={() => handleEdit(item.questionAnswersId,selectedOption)} >
                  Edit
                </button>
-----------------------------------------
import React, { useState, useEffect } from 'react';
import { Table, Pagination, DropdownButton, Dropdown } from 'react-bootstrap';
import { deleteQuestion, getPaginatedQuestions, getQuestions } from "../api";
import { useNavigate } from 'react-router-dom';

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('base'); // Default selection
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [totalPages, setTotalPages] = useState(2);

  const navigate = useNavigate();

  const fetchData = async (vendor,currentPage,itemsPerPage) => {
    try {
      const response = await getPaginatedQuestions(vendor, currentPage, itemsPerPage);
      console.log("this is response",response);
      setSelectedData(response.data);

      const paginationHeader = response.headers.get('x-pagination');
      
      if (paginationHeader) {
        const paginationInfo = JSON.parse(paginationHeader);
        setTotalPages(paginationInfo.TotalPages);
      } else {
        console.error("X-Pagination header not found in response");
      }
    } catch (error) {
      console.log("Error:" + error);
    }
  };

  useEffect(() => {
    fetchData(selectedOption,currentPage,itemsPerPage);
  }, [selectedOption, currentPage, itemsPerPage]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = () => {
    // console.log("option:", selectedOption);
    // console.log("que:", index);
    // navigate(`/update/${selectedOption}/${index}`);
    // console.log(`Editing item at index ${index}`);
  };

  const handleDelete = async (vendor,questionId) => {
  try {
    await deleteQuestion(vendor,questionId);

    console.log("question deleted successfully!")
  } catch (error) {
    console.log("error:---",error)
  }
  };

  const handlePreviousPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    // setCurrentPage((prevPage) => Math.min(prevPage + 1, Math.ceil(selectedData.length / itemsPerPage)));
    setCurrentPage((prevPage) => Math.min(prevPage + 1));
  };

  const handleShowRowsChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1); // Reset to the first page when changing the number of items per page
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = selectedData.slice(indexOfFirstItem, indexOfLastItem);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(totalPages); i++) {
    pageNumbers.push(i);
  }
console.log(pageNumbers)
  return (
    <>
    <br/><br/>
    <div className='container card card-body shadow-lg p-3 mb-5 bg-white rounded'>
      <h3>View/Update ChatBot DB</h3>
      <br />
      <div className='d-inline-flex'>
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark '  style={{marginRight:'50rem'}} value={selectedOption} onChange={handleSelectChange}>
        <option value="base">Base</option>
        <option value="calco">Calico</option>
        <option value="datatrace">DataTrace</option>
        <option value="datatree">Data Tree</option>
        <option value="lnd">LND</option>
        {/* Add more options as needed */}
      </select>
      </div>
      <br />
      <div>Total Pages: {totalPages}</div>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Action To Run</th>
            <th>Variation</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {selectedData.map((item) => (
            <tr key={item.questionAnswersId}>
              <td>{item.questionAnswersId}</td>
              <td>{item.mainQuestion}</td>
              <td>{item.answer}</td>
              <td>{item.actionToRun}</td>
              <td>
                {item.variations?.map((variation,) => (
                  <div key={variation.variationId}> {variation.variationList}</div>
                ))}
              </td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(item.questionAnswersId,selectedOption)} >
                  Edit
                </button>
              </td>
              <td>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(selectedOption,item.questionAnswersId)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      <div className="d-flex justify-content-between">
  <Pagination>
    <Pagination.Prev onClick={handlePreviousPage} disabled={currentPage === 1}>Previous</Pagination.Prev>
    {pageNumbers.map((number) => (
      <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
        {number}
      </Pagination.Item>
    ))}
    <Pagination.Next onClick={handleNextPage} disabled={currentPage === totalPages}>Next</Pagination.Next>
  </Pagination>

  <DropdownButton id="dropdown-basic-button" title={`Show ${itemsPerPage} Rows`}>
    {[5, 10, 20].map((value) => (
      <Dropdown.Item key={value} onClick={() => handleShowRowsChange(value)}>
        {value}
      </Dropdown.Item>
    ))}
  </DropdownButton>
</div>
    </div>
    </>
  );
}

export default AdminPage;
------------------------------------------
export const deleteQuestion = async (vendor, questionId) => {
  try {
    await axios.delete(`${API_BASE_URL}/api/admin/${vendor}/delete-question/${questionId}`);
  } catch (error) {
    console.error('Error deleting question:', error);
    throw error;
  }
};

 const handleDelete = (index) => {
  
  };
 <button className="btn btn-danger ms-2" onClick={() => handleDelete()}>
                  Delete
                </button>
-----------------------------------------
APi
export const importExcel = async(vendor) => {
  try {
    await axios.post(`${API_BASE_URL}/api/admin/${vendor}/import-excel`)
  } catch (error) {
    console.error('Error deleting question:', error);
    throw error;
  }
}

---------------------
import React, { useState } from 'react';
import { addQuestion } from '../api';
import { Button } from 'react-bootstrap';

const initialFormData = {
  mainQuestion: '',
  answer: '',
  actionToRun: '',
  variations: [
    {
      variationList: '',
      variationId: 0,
    },
  ],
};

const AddData = () => {
  const [formData, setFormData] = useState(initialFormData);
  const [selectedOption,setSelectedOption] = useState('base');

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleInputChange = (e, index) => {
    const { name, value } = e.target;
    if (name === 'variationList') {
      const updatedVariations = [...formData.variations];
      updatedVariations[index][name] = value;
      setFormData({
        ...formData,
        variations: updatedVariations,
      });
    } else {
      setFormData({
        ...formData,
        [name]: value,
      });
    }
  };

  const handleSubmit =async (e) => {
    e.preventDefault();
    // Add your form submission logic here
try {
  await addQuestion(selectedOption,formData);
  console.log("FormSubmitted",formData)
} catch (error) {
  console.log("Error:"+error)
}

    
  };

  const handleAddVariation = () => {
    setFormData({
      ...formData,
      variations: [
        ...formData.variations,
        {
          variationList: '',
          variationId: formData.variations.length,
        },
      ],
    });
  };

  const handleRemoveVariation = (index) => {
    const updatedVariations = formData.variations.filter((_, i) => i !== index);
    setFormData({
      ...formData,
      variations: updatedVariations,
    });
  };

  const isFormValid = () => {
    // Add your form validation logic here
    return formData.mainQuestion !== '' && formData.answer !== '' && formData.actionToRun !== '';
  };

  return (
    <div>
        <br></br> <br></br> <br></br>
      <div className='container card card-body'>

        <div className='d-flex'>
        <span><h3>Create ChatBot DB</h3></span>
        
        <span style={{paddingLeft: '3rem'}} ><b>Select Vendor : </b></span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="base">Base</option>
        <option value="calco">Calico</option>
        <option value="datatrace">DataTrace</option>
        <option value="datatree">Data Tree</option>
        <option value="lnd">LND</option>
        {/* Add more options as needed */}
      </select>
      </div>

    <form onSubmit={handleSubmit}>
      <div className='form-group'>
      <label>Main Question:</label>
      <input type="text"  className='form-control' name="mainQuestion" value={formData.mainQuestion} onChange={handleInputChange} />
    </div>
    <br/>
    <div className='form-group'>
      <label>Answer:</label>
      <input type="text" className='form-control'  name="answer" value={formData.answer} onChange={handleInputChange} />
</div>
<br/>
      <div className='form-group'>
      <label>Action to Run:</label>
      <input type="text" className='form-control'  name="actionToRun" value={formData.actionToRun} onChange={handleInputChange} />
</div>
<br/>
<div className='form-group'>
      <label>Variations:</label>
      {formData.variations.map((variation, index) => (
        <div key={index}>
          <br/>
          <input
            type="text"
             className='form-control' 
            name="variationList"
            value={variation.variationList}
            onChange={(e) => handleInputChange(e, index)}
          />
          <br/>
          <button className='btn btn-primary' type="button" onClick={() => handleRemoveVariation(index)}>
            Remove Variation
          </button>
        </div>
      ))}
       <br/>
      <button type="button" className='btn btn-primary d-inline-flex' onClick={handleAddVariation}>
        Add Variation
      </button>
      <br/><br/>
      <button type="submit" className='btn btn-primary' disabled={!isFormValid()}>
        Submit
      </button>
      </div>
    </form>

    </div>
    
    <br/>
    <div className='container'>
    <input type='file' className=' form-control' placeholder='Upload File only type of (txt,json,excel).' />
    <small>Upload File only type of (txt,json,excel).</small><br/><br/>
    <Button>Upload File</Button>
    </div>
    </div>
  );
};

export default AddData;
-------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Table, Pagination, DropdownButton, Dropdown } from 'react-bootstrap';
import { getPaginatedQuestions, getQuestions } from "../api";
import { useNavigate } from 'react-router-dom';

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('base'); // Default selection
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [totalPages, setTotalPages] = useState(2);

  const navigate = useNavigate();

  const fetchData = async (vendor,currentPage,itemsPerPage) => {
    try {
      const response = await getPaginatedQuestions(vendor, currentPage, itemsPerPage);
      console.log("this is response",response);
      setSelectedData(response.data);

      const paginationHeader = response.headers.get('x-pagination');
      
      if (paginationHeader) {
        const paginationInfo = JSON.parse(paginationHeader);
        setTotalPages(paginationInfo.TotalPages);
      } else {
        console.error("X-Pagination header not found in response");
      }
    } catch (error) {
      console.log("Error:" + error);
    }
  };

  useEffect(() => {
    fetchData(selectedOption,currentPage,itemsPerPage);
  }, [selectedOption, currentPage, itemsPerPage]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    console.log("option:", selectedOption);
    console.log("que:", index);
    navigate(`/update/${selectedOption}/${index}`);
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    console.log(`Deleting item at index ${index}`);
  };

  const handlePreviousPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    // setCurrentPage((prevPage) => Math.min(prevPage + 1, Math.ceil(selectedData.length / itemsPerPage)));
    setCurrentPage((prevPage) => Math.min(prevPage + 1));
  };

  const handleShowRowsChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1); // Reset to the first page when changing the number of items per page
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = selectedData.slice(indexOfFirstItem, indexOfLastItem);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(selectedData.length / itemsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="base">Base</option>
        <option value="calco">Calico</option>
        <option value="datatrace">DataTrace</option>
        <option value="datatree">Data Tree</option>
        <option value="lnd">LND</option>
        {/* Add more options as needed */}
      </select>
      <br /><br />
      <div>Total Pages: {totalPages}</div>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Action To Run</th>
            <th>Variation</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {selectedData.map((item, index) => (
            <tr key={item.questionAnswersId}>
              <td>{item.questionAnswersId}</td>
              <td>{item.mainQuestion}</td>
              <td>{item.answer}</td>
              <td>{item.actionToRun}</td>
              <td>
                {item.variations?.map((variation, index) => (
                  <div key={variation.variationId}> {variation.variationList}</div>
                ))}
              </td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(item.questionAnswersId)} >
                  Edit
                </button>
              </td>
              <td>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      <div className="d-flex justify-content-between">
  <Pagination>
    <Pagination.Prev onClick={handlePreviousPage} disabled={currentPage === 1}>Previous</Pagination.Prev>
    {pageNumbers.map((number) => (
      <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
        {number}
      </Pagination.Item>
    ))}
    <Pagination.Next onClick={handleNextPage} disabled={currentPage === totalPages}>Next</Pagination.Next>
  </Pagination>

  <DropdownButton id="dropdown-basic-button" title={`Show ${itemsPerPage} Rows`}>
    {[5, 10, 20].map((value) => (
      <Dropdown.Item key={value} onClick={() => handleShowRowsChange(value)}>
        {value}
      </Dropdown.Item>
    ))}
  </DropdownButton>
</div>
    </div>
  );
}

export default AdminPage;
-------------------------------------------------------------

Edit
{/* Edit Modal */}
    {showEditModal && (
      <Modal show={showEditModal} onHide={handleCancelEdit}>
        <Modal.Header closeButton>
          <Modal.Title>Edit Item</Modal.Title>
        </Modal.Header>
        <Modal.Body>{editModalContent}</Modal.Body>
      </Modal>
    )}
------------------------------------
const handleEdit = (index) => {
  // Assume selectedData is an array of objects
  const selectedItem = selectedData[index];
  setEditingIndex(index);
  setShowEditModal(true);
  setEditModalContent(<EditPage selectedItem={selectedItem} onSave={handleSaveEdit} onCancel={handleCancelEdit} />);
};

const handleSaveEdit = (editedItem) => {
  // Implement the logic to save the edited item to your data (e.g., API call)
  // Update the state accordingly
  const updatedData = [...selectedData];
  updatedData[editingIndex] = editedItem;
  setSelectedData(updatedData);

  // Close the edit modal
  setShowEditModal(false);
  setEditingIndex(null);
};

const handleCancelEdit = () => {
  // Close the edit modal
  setShowEditModal(false);
  setEditingIndex(null);
};
--------------------------------------

--------------------------------------

import React, { useState } from 'react';

function EditPage({ selectedItem, onSave, onCancel }) {
  const [editedItem, setEditedItem] = useState({ ...selectedItem });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditedItem((prevItem) => ({ ...prevItem, [name]: value }));
  };

  const handleSave = () => {
    onSave(editedItem);
  };

  const handleCancel = () => {
    onCancel();
  };

  return (
    <div>
      <h2>Edit Item</h2>
      <form>
        <div className="mb-3">
          <label className="form-label">Question:</label>
          <input
            type="text"
            className="form-control"
            name="question"
            value={editedItem.question}
            onChange={handleInputChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Answer:</label>
          <input
            type="text"
            className="form-control"
            name="answer"
            value={editedItem.answer}
            onChange={handleInputChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Keywords:</label>
          <input
            type="text"
            className="form-control"
            name="keyword"
            value={editedItem.keyword.join(', ')}
            onChange={handleInputChange}
          />
        </div>

        <button type="button" className="btn btn-primary" onClick={handleSave}>
          Save
        </button>
        <button type="button" className="btn btn-secondary ms-2" onClick={handleCancel}>
          Cancel
        </button>
      </form>
    </div>
  );
}

export default EditPage;

-----------------------------------------------------------------------
{
  "ConnectionStrings": {

    "DefaultConnection": "Data Source=np:\\\\.\\pipe\\LOCALDB#10C5858B\\tsql\\query;Initial Catalog=chatbot;Integrated Security=True"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
-----------------------------
<div className="d-flex justify-content-between">
  <Pagination>
    <Pagination.Prev onClick={handlePreviousPage} disabled={currentPage === 1}>Previous</Pagination.Prev>
    {pageNumbers.map((number) => (
      <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
        {number}
      </Pagination.Item>
    ))}
    <Pagination.Next onClick={handleNextPage} disabled={currentPage === totalPages}>Next</Pagination.Next>
  </Pagination>

  <DropdownButton id="dropdown-basic-button" title={`Show ${itemsPerPage} Rows`}>
    {[5, 10, 20].map((value) => (
      <Dropdown.Item key={value} onClick={() => handleShowRowsChange(value)}>
        {value}
      </Dropdown.Item>
    ))}
  </DropdownButton>
</div>
----------
import React, { useState, useEffect } from 'react';
import { Table, Pagination, DropdownButton, Dropdown } from 'react-bootstrap';
import { getPaginatedQuestions, getQuestions } from "../api";
import { useNavigate } from 'react-router-dom';

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('base'); // Default selection
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [totalPages, setTotalPages] = useState(1);

  const navigate = useNavigate();

  const fetchData = async (vendor) => {
    try {
      const response = await getPaginatedQuestions(vendor, currentPage, itemsPerPage);
      setSelectedData(response.data);

      const paginationHeader = response.headers.get('x-pagination');
      
      if (paginationHeader) {
        const paginationInfo = JSON.parse(paginationHeader);
        setTotalPages(paginationInfo.TotalPages);
      } else {
        console.error("X-Pagination header not found in response");
      }
    } catch (error) {
      console.log("Error:" + error);
    }
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption, currentPage, itemsPerPage]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    console.log("option:", selectedOption);
    console.log("que:", index);
    navigate(`/update/${selectedOption}/${index}`);
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    console.log(`Deleting item at index ${index}`);
  };

  const handlePreviousPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prevPage) => Math.min(prevPage + 1, Math.ceil(selectedData.length / itemsPerPage)));
  };

  const handleShowRowsChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1); // Reset to the first page when changing the number of items per page
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = selectedData.slice(indexOfFirstItem, indexOfLastItem);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(selectedData.length / itemsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="base">Base</option>
        <option value="calco">Calico</option>
        <option value="datatrace">DataTrace</option>
        <option value="datatree">Data Tree</option>
        <option value="lnd">LND</option>
        {/* Add more options as needed */}
      </select>
      <br /><br />
      <div>Total Pages: {totalPages}</div>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Action To Run</th>
            <th>Variation</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {currentItems.map((item, index) => (
            <tr key={item.questionAnswersId}>
              <td>{item.questionAnswersId}</td>
              <td>{item.mainQuestion}</td>
              <td>{item.answer}</td>
              <td>{item.actionToRun}</td>
              <td>
                {item.variations?.map((variation, index) => (
                  <div key={variation.variationId}> {variation.variationList}</div>
                ))}
              </td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(item.questionAnswersId)} >
                  Edit
                </button>
              </td>
              <td>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      <div className="d-flex justify-content-between">
        <Pagination>
          <Pagination.Prev onClick={handlePreviousPage} >Previous</Pagination.Prev>
          {pageNumbers.map((number) => (
            <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
              {number}
            </Pagination.Item>
          ))}
          <Pagination.Next onClick={handleNextPage} >Next</Pagination.Next>
        </Pagination>

        <DropdownButton id="dropdown-basic-button" title={`Show ${itemsPerPage} Rows`}>
          {[5, 10, 20].map((value) => (
            <Dropdown.Item key={value} onClick={() => handleShowRowsChange(value)}>
              {value}
            </Dropdown.Item>
          ))}
        </DropdownButton>
      </div>
    </div>
  );
}

export default AdminPage;
-------------------------

import React, { useState, useEffect } from 'react';
import { Table, Pagination, DropdownButton, Dropdown } from 'react-bootstrap';
import { getPaginatedQuestions, getQuestions } from "../api";

import { useNavigate } from 'react-router-dom';

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('base'); // Default selection
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [totalPages, setTotalPages] = useState(1);

  const navigate = useNavigate();

  const fetchData = async (vendor) => {
    try {
      const response = await getPaginatedQuestions(vendor, currentPage, itemsPerPage);
      setSelectedData(response.data);
      // setCurrentPage(1); // Check if this line is necessary
      const paginationHeader = response.headers.get('x-pagination');
      console.log(totalPages);
      if(paginationHeader)
      {
        const paginationInfo = JSON.parse(paginationHeader);
        setTotalPages(paginationInfo.TotalPages);
      }
      
      else {
        console.error("X-Pagination header not found in response");
      }
    } catch (error) {
      console.log("Error:" + error);
    }
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption, currentPage, itemsPerPage]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    console.log("option:", selectedOption);
    console.log("que:", index);
    navigate(`/update/${selectedOption}/${index}`);
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    console.log(`Deleting item at index ${index}`);
  };

  const handlePreviousPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prevPage) => Math.min(prevPage + 1, Math.ceil(selectedData.length / itemsPerPage)));
  };

  const handleShowRowsChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1); // Reset to the first page when changing the number of items per page
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = selectedData.slice(indexOfFirstItem, indexOfLastItem);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(selectedData.length / itemsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="base">Base</option>
        <option value="calco">Calico</option>
        <option value="datatrace">DataTrace</option>
        <option value="datatree">Data Tree</option>
        <option value="lnd">LND</option>
        {/* Add more options as needed */}
      </select>
      <br /><br />
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Action To Run</th>
            <th>Variation</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {currentItems.map((item, index) => (
            <tr key={item.questionAnswersId}>
              <td>{item.questionAnswersId}</td>
              <td>{item.mainQuestion}</td>
              <td>{item.answer}</td>
              <td>{item.actionToRun}</td>
              <td>
                {item.variations?.map((variation, index) => (
                  <div key={variation.variationId}> {variation.variationList}</div>
                ))}
              </td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(item.questionAnswersId)} >
                  Edit
                </button>
              </td>
              <td>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      <div className="d-flex justify-content-between">
        <Pagination>
          <Pagination.Prev onClick={handlePreviousPage} >Previous</Pagination.Prev>
          {pageNumbers.map((number) => (
            <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
              {number}
            </Pagination.Item>
          ))}
          <Pagination.Next onClick={handleNextPage} >Next</Pagination.Next>
        </Pagination>

        <DropdownButton id="dropdown-basic-button" title={`Show ${itemsPerPage} Rows`}>
          {[5, 10, 20].map((value) => (
            <Dropdown.Item key={value} onClick={() => handleShowRowsChange(value)}>
              {value}
            </Dropdown.Item>
          ))}
        </DropdownButton>
      </div>
    </div>
  );
}

export default AdminPage;

_____________________
import React, { useState, useEffect } from 'react';
import { Table, Pagination, DropdownButton, Dropdown } from 'react-bootstrap';
import { getPaginatedQuestions, getQuestions } from "../api";

import { useNavigate } from 'react-router-dom';

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('base'); // Default selection
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);

  const navigate = useNavigate();

  const fetchData = async (vendor) => {
    try {
      const response = await getPaginatedQuestions(vendor,currentPage,itemsPerPage);
      setSelectedData(response.data);
      setCurrentPage(1);
    } catch (error) {
      console.log("Eroor:"+error);
    }
  }

  useEffect(() => {
    fetchData(selectedOption);
  },[selectedOption,currentPage,itemsPerPage]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    // Implement edit functionality here
    console.log("option:",selectedOption)
    console.log("que:",index)
    navigate(`/update/${selectedOption}/${index}`)
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    // Implement delete functionality here
    console.log(`Deleting item at index ${index}`);
  };

  const handlePreviousPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prevPage) => Math.min(prevPage + 1, Math.ceil(selectedData.length / itemsPerPage)));
  };

  const handleShowRowsChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1); // Reset to the first page when changing the number of items per page
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = selectedData.slice(indexOfFirstItem, indexOfLastItem);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(selectedData.length / itemsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="base">Base</option>
        <option value="calco">Calico</option>
        <option value="datatrace">DataTrace</option>
        <option value="datatree">Data Tree</option>
        <option value="lnd">LND</option>
        {/* Add more options as needed */}
      </select>
      <br /><br/>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Action To Run</th>
            <th>Variation</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {currentItems.map((item,index) => (
            <tr key={item.questionAnswersId}>
              <td>{item.questionAnswersId}</td>
              <td>{item.mainQuestion}</td>
              <td>{item.answer}</td>
              <td>{item.actionToRun}</td>
              <td>
              {item.variations?.map((variation, index) => (
              <div key={variation.variationId}> {variation.variationList}</div>
            ))}
              </td>
              <td>
                <button className="btn btn-primary"  onClick={() => handleEdit(item.questionAnswersId)} >
                  Edit
                </button>
                </td>
                <td>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      <div className="d-flex justify-content-between">
        <Pagination>
          <Pagination.Prev onClick={handlePreviousPage} >Previous</Pagination.Prev>
          {pageNumbers.map((number) => (
            <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
              {number}
            </Pagination.Item>
          ))}
          <Pagination.Next onClick={handleNextPage} >Next</Pagination.Next>
        </Pagination>

        <DropdownButton id="dropdown-basic-button" title={`Show ${itemsPerPage} Rows`}>
          {[5, 10, 20].map((value) => (
            <Dropdown.Item key={value} onClick={() => handleShowRowsChange(value)}>
              {value}
            </Dropdown.Item>
          ))}
        </DropdownButton>
      </div>
    </div>
  );
}

export default AdminPage;

      
---------------------------------------------------------
// edit.js
import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from '../api';

function UpdateData({ selectedOption, questionId }) {
  const [questionData, setQuestionData] = useState({});
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        const question = await getQuestions(selectedOption);
        const selectedQuestion = question.find(q => q.questionId === questionId);
        setQuestionData(selectedQuestion);
        console.log("data:"+questionData)
      } catch (error) {
        console.error('Error fetching question for editing:', error);
      }
    };

    fetchData();
  }, [selectedOption, questionId]);

  const handleUpdate = async () => {
    try {
      const formData = {
        mainQuestion: questionData.mainQuestion,
        answer: questionData.answer,
        actionToRun: questionData.actionToRun,
        variations: questionData.variations.map((variation) => ({
          variationList: variation.variationList,
          variationId: variation.variationId,
        })),
      };
console.log(selectedOption, questionId, formData)
      await updateQuestion(selectedOption, questionId, formData);
      // Add any additional logic or redirect to the admin page after successful update
    } catch (error) {
      console.error('Error updating question:', error);
    }
  };

  return (
    <div>
      <label>Main Question:</label>
      <input
        type="text"
        value={questionData.mainQuestion || ''}
        onChange={(e) => setQuestionData({ ...questionData, mainQuestion: e.target.value })}
      />

      <label>Answer:</label>
      <input
        type="text"
        value={questionData.answer || ''}
        onChange={(e) => setQuestionData({ ...questionData, answer: e.target.value })}
      />

      <label>Action to Run:</label>
      <input
        type="text"
        value={questionData.actionToRun || ''}
        onChange={(e) => setQuestionData({ ...questionData, actionToRun: e.target.value })}
      />

      <label>Variations:</label>
      {questionData.variations?.map((variation, index) => (
        <div key={index}>
          <input
            type="text"
            value={variation.variationList || ''}
            onChange={(e) =>
              setQuestionData({
                ...questionData,
                variations: questionData.variations.map((v, i) =>
                  i === index
                    ? { ...v, variationList: e.target.value }
                    : v
                ),
              })
            }
          />
        </div>
      ))}

      <button onClick={handleUpdate}>Update</button>
    </div>
  );
}

export default UpdateData;

=======
// edit.js
import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from '../api';

function EditPage({ selectedOption, questionId }) {
  const [questionData, setQuestionData] = useState({});
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        const question = await getQuestions(selectedOption);
        const selectedQuestion = question.find(q => q.questionId === questionId);
        setQuestionData(selectedQuestion);
      } catch (error) {
        console.error('Error fetching question for editing:', error);
      }
    };

    fetchData();
  }, [selectedOption, questionId]);

  const handleUpdate = async () => {
    try {
      const formData = {
        mainQuestion: questionData.mainQuestion,
        answer: questionData.answer,
        actionToRun: questionData.actionToRun,
        variations: questionData.variations.map((variation) => ({
          variationList: variation.variationList,
          variationId: variation.variationId,
        })),
      };

      await updateQuestion(selectedOption, questionId, formData);
      // Add any additional logic or redirect to the admin page after successful update
    } catch (error) {
      console.error('Error updating question:', error);
    }
  };

  return (
    <div>
      <label>Main Question:</label>
      <input
        type="text"
        value={questionData.mainQuestion || ''}
        onChange={(e) => setQuestionData({ ...questionData, mainQuestion: e.target.value })}
      />

      <label>Answer:</label>
      <input
        type="text"
        value={questionData.answer || ''}
        onChange={(e) => setQuestionData({ ...questionData, answer: e.target.value })}
      />

      <label>Action to Run:</label>
      <input
        type="text"
        value={questionData.actionToRun || ''}
        onChange={(e) => setQuestionData({ ...questionData, actionToRun: e.target.value })}
      />

      <label>Variations:</label>
      {questionData.variations?.map((variation, index) => (
        <div key={index}>
          <input
            type="text"
            value={variation.variationList || ''}
            onChange={(e) =>
              setQuestionData({
                ...questionData,
                variations: questionData.variations.map((v, i) =>
                  i === index
                    ? { ...v, variationList: e.target.value }
                    : v
                ),
              })
            }
          />
        </div>
      ))}

      <button onClick={handleUpdate}>Update</button>
    </div>
  );
}

export default EditPage;
------------------
 const formData = {
        mainQuestion: questionData.mainQuestion,
        answer: questionData.answer,
        actionToRun: questionData.actionToRun,
        variations: questionData.variations.map((variation) => ({
          variationList: variation.variationList,
          variationId: variation.variationId,
        })),

    }
==========
// edit.js
import React, { useState, useEffect } from 'react';
import { getQuestions, updateQuestion } from '../api';

function EditPage({ selectedOption, questionId }) {
  const [questionData, setQuestionData] = useState({});
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        const question = await getQuestions(selectedOption); // Assuming getQuestions returns an array of questions
        const selectedQuestion = question.find(q => q.questionId === questionId);
        setQuestionData(selectedQuestion);
      } catch (error) {
        console.error('Error fetching question for editing:', error);
      }
    };

    fetchData();
  }, [selectedOption, questionId]);

  const handleUpdate = async () => {
    try {
      await updateQuestion(selectedOption, questionId, questionData);
      // Add any additional logic or redirect to the admin page after successful update
    } catch (error) {
      console.error('Error updating question:', error);
    }
  };

  // Your UI for editing questionData here

  return (
    <div>
      {/* UI for editing questionData */}
      <button onClick={handleUpdate}>Update</button>
    </div>
  );
}

export default EditPage;
+++++++++++++++++++++++++++++++++
import React, { useState, useEffect } from 'react';
import { useParams, useHistory } from 'react-router-dom';
import { getQuestion, updateQuestion } from "../api";

function EditQuestionPage() {
  const { questionId } = useParams();
  const history = useHistory();

  const [questionData, setQuestionData] = useState({
    index: '',
    Question: '',
    Answer: '',
    ActionToRun: '',
    Variation: '',
  });

  useEffect(() => {
    const fetchQuestion = async () => {
      try {
        const response = await getQuestion(questionId);
        setQuestionData(response.data);
      } catch (error) {
        console.error('Error fetching question:', error);
        // Handle error, redirect, or show a user-friendly message
      }
    };

    fetchQuestion();
  }, [questionId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setQuestionData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSaveChanges = async () => {
    try {
      await updateQuestion(questionData);
      // Optionally, you can redirect the user to the question list or perform other actions
      history.push('/question-list');
    } catch (error) {
      console.error('Error updating question:', error);
      // Handle error, show a user-friendly message, or log the error
    }
  };

  return (
    <div>
      <h2>Edit Question</h2>
      <form>
        <label>
          Index:
          <input
            type="text"
            name="index"
            value={questionData.index}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <label>
          Question:
          <input
            type="text"
            name="Question"
            value={questionData.Question}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <label>
          Answer:
          <input
            type="text"
            name="Answer"
            value={questionData.Answer}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <label>
          Action To Run:
          <input
            type="text"
            name="ActionToRun"
            value={questionData.ActionToRun}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <label>
          Variation:
          <input
            type="text"
            name="Variation"
            value={questionData.Variation}
            onChange={handleInputChange}
          />
        </label>
        <br />
        <button type="button" onClick={handleSaveChanges}>
          Save Changes
        </button>
      </form>
    </div>
  );
}

export default EditQuestionPage;

+++++++++++++++++++
import React, { useState } from 'react';
import React, { useState } from 'react';
import { updateQuestion } from './api'; // Adjust the path accordingly

const Edit = () => {
  const [questionData, setQuestionData] = useState({
    // Initialize with default values or fetch existing data
    // For example: title: '', description: '', etc.
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setQuestionData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    const vendor = 'your_vendor'; // Replace with your vendor
    const questionId = 'your_question_id'; // Replace with the actual question ID

    try {
      await updateQuestion(vendor, questionId, questionData);
      console.log('Question updated successfully!');
    } catch (error) {
      console.error('Error updating question:', error);
      // Handle error, show user feedback, etc.
    }
  };

  return (
    <form onSubmit={handleFormSubmit}>
      {/* Add your input fields for question data */}
      <label>
        Title:
        <input type="text" name="title" value={questionData.title || ''} onChange={handleInputChange} />
      </label>

      <label>
        Description:
        <textarea name="description" value={questionData.description || ''} onChange={handleInputChange} />
      </label>

      {/* Add more fields as needed */}
      
      <button type="submit">Update Question</button>
    </form>
  );
};

export default Edit;

+++++++++++++++++++++++
import React, { useState } from 'react';

const initialFormData = {
  mainQuestion: '',
  answer: '',
  actionToRun: '',
  variations: [
    {
      variationList: '',
      variationId: 0,
    },
  ],
};

const YourFormComponent = () => {
  const [formData, setFormData] = useState(initialFormData);

  const handleInputChange = (e, index) => {
    const { name, value } = e.target;
    if (name === 'variationList') {
      const updatedVariations = [...formData.variations];
      updatedVariations[index][name] = value;
      setFormData({
        ...formData,
        variations: updatedVariations,
      });
    } else {
      setFormData({
        ...formData,
        [name]: value,
      });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Add your form submission logic here
    console.log('Form submitted:', formData);
  };

  const handleAddVariation = () => {
    setFormData({
      ...formData,
      variations: [
        ...formData.variations,
        {
          variationList: '',
          variationId: formData.variations.length,
        },
      ],
    });
  };

  const handleRemoveVariation = (index) => {
    const updatedVariations = formData.variations.filter((_, i) => i !== index);
    setFormData({
      ...formData,
      variations: updatedVariations,
    });
  };

  const isFormValid = () => {
    // Add your form validation logic here
    return formData.mainQuestion !== '' && formData.answer !== '' && formData.actionToRun !== '';
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>Main Question:</label>
      <input type="text" name="mainQuestion" value={formData.mainQuestion} onChange={handleInputChange} />

      <label>Answer:</label>
      <input type="text" name="answer" value={formData.answer} onChange={handleInputChange} />

      <label>Action to Run:</label>
      <input type="text" name="actionToRun" value={formData.actionToRun} onChange={handleInputChange} />

      <label>Variations:</label>
      {formData.variations.map((variation, index) => (
        <div key={index}>
          <input
            type="text"
            name="variationList"
            value={variation.variationList}
            onChange={(e) => handleInputChange(e, index)}
          />
          <button type="button" onClick={() => handleRemoveVariation(index)}>
            Remove Variation
          </button>
        </div>
      ))}
      <button type="button" onClick={handleAddVariation}>
        Add Variation
      </button>

      <button type="submit" disabled={!isFormValid()}>
        Submit
      </button>
    </form>
  );
};

export default YourFormComponent;
--+++++++++++

{
  "mainQuestion": "string",
  "answer": "string",
  "actionToRun": "string",
  "variations": [
    {
      "variationList": "string",
      "variationId": 0
    }
  ]
}
----------------------------------------
import React, { useState, useEffect } from 'react';
import data1 from './data1.json'; // Import JSON file
import data2 from './data2.json'; // Import another JSON file

const DataDisplayComponent = () => {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('data1'); // Default selection

  const fetchData = (file) => {
    const selectedJsonData = {
      data1,
      data2,
      // Add more imports as needed
    };

    setSelectedData(selectedJsonData[file]);
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  return (
    <div>
      <select value={selectedOption} onChange={handleSelectChange}>
        <option value="data1">Data Set 1</option>
        <option value="data2">Data Set 2</option>
        {/* Add more options as needed */}
      </select>

      {selectedData.map((item, index) => (
        <div key={index}>
          <p>Index: {index}</p>
          <p>Question: {item.question}</p>
          <p>Answer: {item.answer}</p>
          <p>Keywords: {item.Keyword.join(', ')}</p>
        </div>
      ))}
    </div>
  );
};

export default DataDisplayComponent;



const fetchData = async () => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts');
      const fetchedData = await response.json();
      setSelectedData(fetchedData);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };


const handleEdit = (index) => {
    // Implement edit functionality here
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    // Implement delete functionality here
    console.log(`Deleting item at index ${index}`);
  };






import React, { useState, useEffect } from 'react';
import Calico from "../assest/Calico.json"
import DataTree from "../assest/DataTree.json"
import LND from "../assest/LND.json"

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('Calico'); // Default selection

  const fetchData = (file) => {
    const selectedJsonData = {
     Calico,DataTree,LND,
      // Add more imports as needed
    };

    setSelectedData(selectedJsonData[file]);
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  return (
    <div>
      <br/>
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="Calico">Calico</option>
        <option value="DataTree">DataTree</option>
        <option value="LND">LND</option>
        {/* Add more options as needed */}
      </select>
      <br/>
    <table className='table table-striped'>
      <thead>
        <tr>
          <th>Index</th>
          <th>Question</th>
          <th >Answer</th>
          <th>Keywords</th>
        </tr>
      </thead>

    <tbody>
    

      {selectedData.map((item, index) => (
        <tr key={index}>
          <td>{index}</td>
          <td> {item.question}</td>
          <td>{item.answer}</td>
          <td>{item.keyword.join(', ')}</td>
        </tr>
      ))}
      </tbody>
      </table>
    </div>
  );
}
 
export default AdminPage;
 


const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('Calico'); // Default selection

  const fetchData = (file) => {
    const selectedJsonData = {
      Calico,
      DataTree,
      LND,
      // Add more imports as needed
    };

    setSelectedData(selectedJsonData[file]);
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    // Implement edit functionality here
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    // Implement delete functionality here
    console.log(`Deleting item at index ${index}`);
  };

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="Calico">Calico</option>
        <option value="DataTree">DataTree</option>
        <option value="LND">LND</option>
        {/* Add more options as needed */}
      </select>
      <br />
      <table className='table table-striped'>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Keywords</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {selectedData.map((item, index) => (
            <tr key={index}>
              <td>{index}</td>
              <td>{item.question}</td>
              <td>{item.answer}</td>
              <td>{item.keyword.join(', ')}</td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(index)}>
                  Edit
                </button>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );



---------------------------------



import React, { useState, useEffect } from 'react';
import Calico from "../assest/Calico.json"
import DataTree from "../assest/DataTree.json"
import LND from "../assest/LND.json"

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('Calico'); // Default selection

  const fetchData = (file) => {
    const selectedJsonData = {
      Calico,
      DataTree,
      LND,
      // Add more imports as needed
    };

    setSelectedData(selectedJsonData[file]);
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    // Implement edit functionality here
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    // Implement delete functionality here
    console.log(`Deleting item at index ${index}`);
  };

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="Calico">Calico</option>
        <option value="DataTree">DataTree</option>
        <option value="LND">LND</option>
        {/* Add more options as needed */}
      </select>
      <br />
      <table className='table table-striped'>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Keywords</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {selectedData.map((item, index) => (
            <tr key={index}>
              <td>{index}</td>
              <td>{item.question}</td>
              <td>{item.answer}</td>
              <td>{item.keyword.join(', ')}</td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(index)}>
                  Edit
                </button>


                </td>
                <td>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
 
export default AdminPage;
 


--+++++-----
import React, { useState, useEffect } from 'react';
import { Table, Pagination } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import Calico from "../assest/Calico.json";
import DataTree from "../assest/DataTree.json";
import LND from "../assest/LND.json";

function AdminPage() {
  const itemsPerPage = 5; // Number of items per page
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('Calico'); // Default selection
  const [currentPage, setCurrentPage] = useState(1);

  const fetchData = (file) => {
    const selectedJsonData = {
      Calico,
      DataTree,
      LND,
      // Add more imports as needed
    };

    setSelectedData(selectedJsonData[file]);
    setCurrentPage(1); // Reset to the first page when changing data
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    // Implement edit functionality here
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    // Implement delete functionality here
    console.log(`Deleting item at index ${index}`);
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = selectedData.slice(indexOfFirstItem, indexOfLastItem);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(selectedData.length / itemsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="Calico">Calico</option>
        <option value="DataTree">DataTree</option>
        <option value="LND">LND</option>
        {/* Add more options as needed */}
      </select>
      <br />
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Keywords</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {currentItems.map((item, index) => (
            <tr key={index}>
              <td>{index + indexOfFirstItem}</td>
              <td>{item.question}</td>
              <td>{item.answer}</td>
              <td>{item.keyword.join(', ')}</td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(index)}>
                  Edit
                </button>
              </td>
              <td>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>



---++-+-+--+-+-+--+--+-

import React, { useState, useEffect } from 'react';
import { Table, Pagination, DropdownButton, Dropdown } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import Calico from "../assest/Calico.json";
import DataTree from "../assest/DataTree.json";
import LND from "../assest/LND.json";

function AdminPage() {
  const [selectedData, setSelectedData] = useState([]);
  const [selectedOption, setSelectedOption] = useState('Calico'); // Default selection
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);

  const fetchData = (file) => {
    const selectedJsonData = {
      Calico,
      DataTree,
      LND,
      // Add more imports as needed
    };

    setSelectedData(selectedJsonData[file]);
    setCurrentPage(1); // Reset to the first page when changing data
  };

  useEffect(() => {
    fetchData(selectedOption);
  }, [selectedOption]);

  const handleSelectChange = (e) => {
    setSelectedOption(e.target.value);
  };

  const handleEdit = (index) => {
    // Implement edit functionality here
    console.log(`Editing item at index ${index}`);
  };

  const handleDelete = (index) => {
    // Implement delete functionality here
    console.log(`Deleting item at index ${index}`);
  };

  const handlePreviousPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prevPage) => Math.min(prevPage + 1, Math.ceil(selectedData.length / itemsPerPage)));
  };

  const handleShowRowsChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1); // Reset to the first page when changing the number of items per page
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = selectedData.slice(indexOfFirstItem, indexOfLastItem);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(selectedData.length / itemsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <div>
      <br />
      <span>Select Vendor : </span>
      <select className='btn btn-outline-dark' value={selectedOption} onChange={handleSelectChange}>
        <option value="Calico">Calico</option>
        <option value="DataTree">DataTree</option>
        <option value="LND">LND</option>
        {/* Add more options as needed */}
      </select>
      <br />
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Index</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Keywords</th>
            <th>Action</th>
          </tr>
        </thead>

        <tbody>
          {currentItems.map((item, index) => (
            <tr key={index}>
              <td>{index + indexOfFirstItem}</td>
              <td>{item.question}</td>
              <td>{item.answer}</td>
              <td>{item.keyword.join(', ')}</td>
              <td>
                <button className="btn btn-primary" onClick={() => handleEdit(index)}>
                  Edit
                </button>
                <button className="btn btn-danger ms-2" onClick={() => handleDelete(index)}>
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      <div className="d-flex justify-content-between">
        <Pagination>
          <Pagination.Prev onClick={handlePreviousPage} />
          {pageNumbers.map((number) => (
            <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
              {number}
            </Pagination.Item>
          ))}
          <Pagination.Next onClick={handleNextPage} />
        </Pagination>

        <DropdownButton id="dropdown-basic-button" title={`Show ${itemsPerPage} Rows`}>
          {[5, 10, 20].map((value) => (
            <Dropdown.Item key={value} onClick={() => handleShowRowsChange(value)}>
              {value}
            </Dropdown.Item>
          ))}
        </DropdownButton>
      </div>
    </div>
  );
}

export default AdminPage;

      <Pagination>
        {pageNumbers.map((number) => (
          <Pagination.Item key={number} active={number === currentPage} onClick={() => setCurrentPage(number)}>
            {number}
          </Pagination.Item>
        ))}
      </Pagination>
    </div>
  );
}

export default AdminPage;
